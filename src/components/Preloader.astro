---
// Preloader component with GSAP animations
---

<div id="preloader" class="fixed inset-0 z-50 bg-white flex items-center justify-center">
  <div class="text-center">
    <!-- Logo -->
    <div class="preloader-logo mb-8">
      <svg width="60" height="60" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
        <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
        <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
      </svg>
    </div>
    
    <!-- Progress Bar -->
    <div class="w-64 h-1 bg-gray-200 rounded-full overflow-hidden mb-4">
      <div id="progress-bar" class="h-full bg-gray-900 rounded-full w-0"></div>
    </div>
    
    <!-- Loading Text -->
    <p id="progress-text" class="text-sm text-gray-600">Loading...</p>
  </div>
</div>

<script>
  import { gsap } from 'gsap';
  import imagesLoaded from 'imagesloaded';

  class PreloaderManager {
    private preloader: HTMLElement | null;
    private progressBar: HTMLElement | null;
    private progressText: HTMLElement | null;
    private progress: number = 0;

    constructor() {
      this.preloader = document.getElementById('preloader');
      this.progressBar = document.getElementById('progress-bar');
      this.progressText = document.getElementById('progress-text');
      this.init();
    }

    init(): void {
      if (!this.preloader || !this.progressBar || !this.progressText) {
        console.warn('Preloader elements not found');
        return;
      }

      // Set initial state
      gsap.set(this.preloader, { opacity: 1 });
      gsap.set(this.progressBar, { width: '0%' });

      // Start loading process
      this.startLoading();
    }

    startLoading(): void {
      const images = document.querySelectorAll('img');
      
      if (images.length === 0) {
        // No images to load, proceed immediately
        this.completeLoading();
        return;
      }

      // Use imagesLoaded to track image loading
      const imgLoad = imagesLoaded(document.body);
      
      imgLoad.on('progress', (instance: any, image: any) => {
        this.progress = (instance.progressedCount / instance.images.length) * 100;
        this.updateProgress();
      });

      imgLoad.on('done', () => {
        this.completeLoading();
      });

      imgLoad.on('fail', () => {
        console.warn('Some images failed to load');
        this.completeLoading();
      });

      // Fallback timeout
      setTimeout(() => {
        this.completeLoading();
      }, 5000);
    }

    updateProgress(): void {
      if (!this.progressBar || !this.progressText) return;

      const roundedProgress = Math.round(this.progress);
      
      gsap.to(this.progressBar, {
        width: `${this.progress}%`,
        duration: 0.3,
        ease: "power2.out"
      });

      this.progressText.textContent = `Loading... ${roundedProgress}%`;
    }

    completeLoading(): void {
      if (!this.preloader || !this.progressBar || !this.progressText) return;

      // Complete progress bar
      gsap.to(this.progressBar, {
        width: '100%',
        duration: 0.5,
        ease: "power2.out"
      });

      this.progressText.textContent = 'Loading... 100%';

      // Hide preloader after a short delay
      gsap.to(this.preloader, {
        opacity: 0,
        duration: 0.8,
        delay: 0.5,
        ease: "power2.inOut",
        onComplete: () => {
          if (this.preloader) {
            this.preloader.style.display = 'none';
          }
          this.animatePageIn();
        }
      });
    }

    animatePageIn(): void {
      // Animate in page elements
      const heroElements = document.querySelectorAll('.hero-element');
      const videoCards = document.querySelectorAll('.video-card');

      // Set initial state
      gsap.set([...heroElements, ...videoCards], {
        opacity: 0,
        y: 50,
        scale: 0.9
      });

      // Animate hero elements
      gsap.to(heroElements, {
        opacity: 1,
        y: 0,
        scale: 1,
        duration: 1,
        stagger: 0.1,
        ease: "power3.out",
        delay: 0.2
      });

      // Animate video cards
      gsap.to(videoCards, {
        opacity: 1,
        y: 0,
        scale: 1,
        duration: 0.8,
        stagger: 0.08,
        ease: "power2.out",
        delay: 0.5
      });
    }
  }

  // Initialize preloader when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new PreloaderManager();
  });

  // Also initialize on Astro page load
  document.addEventListener('astro:page-load', () => {
    new PreloaderManager();
  });
</script>

<style>
  #preloader {
    backdrop-filter: blur(10px);
  }
</style>