---
import VideoCard from "./VideoCard.astro";
import Pagination from "./Pagination.astro";
import {
    getAllVideos,
    getAllCategories,
    sortVideosByDate,
    generateSlug,
} from "../utils/videoUtils";

// Props interface for reusability
interface Props {
    videos?: any[]; // Pre-filtered videos from parent page
    currentCategory?: string; // Current active category for highlighting tabs
    showAllTab?: boolean; // Whether to show "All Work" tab
    currentPage?: number; // Current page number
    itemsPerPage?: number; // Items per page
    baseUrl?: string; // Base URL for pagination
}

const {
    videos: propsVideos,
    currentCategory = "All",
    showAllTab = true,
    currentPage = 1,
    itemsPerPage = 24,
    baseUrl = "/",
} = Astro.props;

// If videos are passed as props, use them. Otherwise get all videos
const allVideos = propsVideos || sortVideosByDate(await getAllVideos());

// Calculate pagination
const totalVideos = allVideos.length;
const totalPages = Math.ceil(totalVideos / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const displayVideos = allVideos.slice(startIndex, endIndex);

// Get all categories for filter tabs
const categories = await getAllCategories();

// Calculate video count for each category (using all videos for accurate counts)
const allVideosForCount = propsVideos ? await getAllVideos() : allVideos;
const categoryVideoCounts = categories.reduce(
    (counts, category) => {
        counts[category] = allVideosForCount.filter(
            (video) => video.data.category === category,
        ).length;
        return counts;
    },
    {} as Record<string, number>,
);

// Total video count for "All Work" tab
const totalVideoCount = allVideosForCount.length;
---

<section class="py-8 bg-gray-50">
    <div class="w-full px-5">
        <!-- Filter Tabs -->
        <div class="flex flex-wrap justify-center gap-3 mb-12">
            {
                showAllTab && (
                    <a
                        href="/"
                        data-category="all"
                        title={`${totalVideoCount} videos`}
                        class={`px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 ${
                            currentCategory === "All"
                                ? "bg-gray-900 text-white shadow-lg"
                                : "bg-white text-gray-700 hover:bg-gray-100 border border-gray-200 hover:border-gray-300"
                        }`}
                    >
                        All Work
                    </a>
                )
            }
            {
                categories.map((category: string) => (
                    <a
                        href={`/category/${generateSlug(category)}`}
                        data-category={generateSlug(category)}
                        title={`${categoryVideoCounts[category]} videos`}
                        class={`px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 ${
                            currentCategory === category
                                ? "bg-gray-900 text-white shadow-lg"
                                : "bg-white text-gray-700 hover:bg-gray-100 border border-gray-200 hover:border-gray-300"
                        }`}
                    >
                        {category}
                    </a>
                ))
            }

            <!-- Additional Action Buttons -->
            <button
                data-shuffle
                class="px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 bg-white text-gray-700 hover:bg-gray-100 border border-gray-200 hover:border-gray-300"
                title="Shuffle items"
            >
                <svg
                    class="w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    ></path>
                </svg>
            </button>
        </div>

        <!-- Video Grid -->
        <div
            class="video-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
        >
            {
                displayVideos.map((video: any, index: number) => (
                    <VideoCard
                        title={video.data.title}
                        author={video.data.author}
                        thumbnail={video.data.thumbnail}
                        videoUrl={video.data.videoUrl}
                        category={video.data.category}
                        slug={video.slug}
                    />
                ))
            }
        </div>

        <!-- Pagination -->
        <Pagination 
            currentPage={currentPage}
            totalPages={totalPages}
            baseUrl={baseUrl}
        />
    </div>
</section>

<script>
    // Import grid actions for interactive animations
    import "../scripts/gridActions.js";
</script>