---
interface Props {
  videoUrl: string;
  poster?: string;
  autoplay?: boolean;
  muted?: boolean;
  loop?: boolean;
  className?: string;
}

const { 
  videoUrl, 
  poster, 
  autoplay = true, 
  muted = true, 
  loop = true, 
  className = "" 
} = Astro.props;
---

<div class={`video-player-container relative w-full h-full ${className}`}>
  <video 
    id="main-video"
    class="w-full h-full object-cover block"
    autoplay={autoplay}
    muted={muted}
    loop={loop}
    playsinline
    poster={poster}
  >
    <source src={videoUrl} type="video/mp4" />
    Your browser does not support the video tag.
  </video>
  
  <!-- Custom Video Controls -->
  <div class="video-controls absolute bottom-4 left-4 right-4 bg-black/50 backdrop-blur-sm rounded-lg p-4 opacity-0 transition-opacity duration-300 hover:opacity-100">
    <!-- Progress Bar -->
    <div class="mb-3">
      <div class="relative">
        <div class="progress-bg w-full h-1 bg-white/30 rounded-full cursor-pointer">
          <div class="progress-fill h-full bg-white rounded-full transition-all duration-150" style="width: 0%"></div>
        </div>
        <div class="progress-handle absolute top-1/2 transform -translate-y-1/2 w-3 h-3 bg-white rounded-full opacity-0 transition-opacity duration-150" style="left: 0%"></div>
      </div>
    </div>
    
    <!-- Control Buttons -->
    <div class="flex items-center justify-between">
      <div class="flex items-center gap-3">
        <!-- Play/Pause Button -->
        <button id="play-pause-btn" class="p-2 hover:bg-white/20 rounded-full transition-colors">
          <svg id="play-icon" class="w-5 h-5 text-white hidden" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z"/>
          </svg>
          <svg id="pause-icon" class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
            <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
          </svg>
        </button>
        
        <!-- Mute/Unmute Button -->
        <button id="mute-btn" class="p-2 hover:bg-white/20 rounded-full transition-colors">
          <svg id="volume-icon" class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
            <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
          </svg>
          <svg id="mute-icon" class="w-5 h-5 text-white hidden" fill="currentColor" viewBox="0 0 24 24">
            <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
          </svg>
        </button>
        
        <!-- Volume Slider -->
        <div class="volume-slider-container flex items-center gap-2 opacity-0 transition-opacity duration-300">
          <input 
            type="range" 
            id="volume-slider" 
            min="0" 
            max="1" 
            step="0.1" 
            value="1"
            class="w-20 h-1 bg-white/30 rounded-lg appearance-none cursor-pointer slider"
          />
        </div>
        
        <!-- Time Display -->
        <div class="text-white text-sm font-mono">
          <span id="current-time">0:00</span> / <span id="duration">0:00</span>
        </div>
      </div>
      
      <div class="flex items-center gap-3">
        <!-- Fullscreen Button -->
        <button id="fullscreen-btn" class="p-2 hover:bg-white/20 rounded-full transition-colors">
          <svg id="fullscreen-icon" class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"/>
          </svg>
          <svg id="exit-fullscreen-icon" class="w-5 h-5 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 9V4.5M9 9H4.5M9 9L3.5 3.5M15 9h4.5M15 9V4.5M15 9l5.5-5.5M9 15v4.5M9 15H4.5M9 15l-5.5 5.5M15 15h4.5M15 15v4.5m0 0l5.5 5.5"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .video-player-container:hover .video-controls {
    opacity: 1;
  }
  
  .volume-slider-container:hover,
  .video-controls:hover .volume-slider-container {
    opacity: 1;
  }
  
  .progress-bg:hover .progress-handle {
    opacity: 1;
  }
  
  /* Custom slider styles */
  .slider {
    background: linear-gradient(to right, white 0%, white 100%, rgba(255,255,255,0.3) 100%);
  }
  
  .slider::-webkit-slider-thumb {
    appearance: none;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: white;
    cursor: pointer;
  }
  
  .slider::-moz-range-thumb {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: white;
    cursor: pointer;
    border: none;
  }
</style>

<script>
  class VideoPlayer {
    private video: HTMLVideoElement;
    private playPauseBtn: HTMLElement | null;
    private playIcon: HTMLElement | null;
    private pauseIcon: HTMLElement | null;
    private muteBtn: HTMLElement | null;
    private volumeIcon: HTMLElement | null;
    private muteIcon: HTMLElement | null;
    private volumeSlider: HTMLInputElement;
    private progressBg: HTMLElement;
    private progressFill: HTMLElement;
    private progressHandle: HTMLElement;
    private currentTimeEl: HTMLElement | null;
    private durationEl: HTMLElement | null;
    private fullscreenBtn: HTMLElement | null;
    private fullscreenIcon: HTMLElement | null;
    private exitFullscreenIcon: HTMLElement | null;
    private container: HTMLElement;

    constructor() {
      this.video = document.getElementById('main-video') as HTMLVideoElement;
      this.playPauseBtn = document.getElementById('play-pause-btn');
      this.playIcon = document.getElementById('play-icon');
      this.pauseIcon = document.getElementById('pause-icon');
      this.muteBtn = document.getElementById('mute-btn');
      this.volumeIcon = document.getElementById('volume-icon');
      this.muteIcon = document.getElementById('mute-icon');
      this.volumeSlider = document.getElementById('volume-slider') as HTMLInputElement;
      this.progressBg = document.querySelector('.progress-bg') as HTMLElement;
      this.progressFill = document.querySelector('.progress-fill') as HTMLElement;
      this.progressHandle = document.querySelector('.progress-handle') as HTMLElement;
      this.currentTimeEl = document.getElementById('current-time');
      this.durationEl = document.getElementById('duration');
      this.fullscreenBtn = document.getElementById('fullscreen-btn');
      this.fullscreenIcon = document.getElementById('fullscreen-icon');
      this.exitFullscreenIcon = document.getElementById('exit-fullscreen-icon');
      this.container = document.querySelector('.video-player-container') as HTMLElement;
      
      this.init();
    }
    
    init() {
      // Play/Pause functionality
      this.playPauseBtn?.addEventListener('click', () => this.togglePlayPause());
      this.video?.addEventListener('click', () => this.togglePlayPause());
      
      // Mute functionality
      this.muteBtn?.addEventListener('click', () => this.toggleMute());
      
      // Volume control
      this.volumeSlider?.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        this.video.volume = parseFloat(target.value);
        this.updateVolumeIcon();
      });
      
      // Progress bar
      this.progressBg?.addEventListener('click', (e) => this.seekTo(e));
      this.video?.addEventListener('timeupdate', () => this.updateProgress());
      this.video?.addEventListener('loadedmetadata', () => this.updateDuration());
      
      // Fullscreen
      this.fullscreenBtn?.addEventListener('click', () => this.toggleFullscreen());
      document.addEventListener('fullscreenchange', () => this.updateFullscreenIcon());
      
      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => this.handleKeyboard(e));
      
      // Update initial state
      this.updatePlayPauseIcon();
      this.updateVolumeIcon();
    }
    
    togglePlayPause() {
      if (this.video.paused) {
        this.video.play();
      } else {
        this.video.pause();
      }
      this.updatePlayPauseIcon();
    }
    
    updatePlayPauseIcon() {
      if (this.video.paused) {
        this.playIcon?.classList.remove('hidden');
        this.pauseIcon?.classList.add('hidden');
      } else {
        this.playIcon?.classList.add('hidden');
        this.pauseIcon?.classList.remove('hidden');
      }
    }
    
    toggleMute() {
      this.video.muted = !this.video.muted;
      this.updateVolumeIcon();
    }
    
    updateVolumeIcon() {
      if (this.video.muted || this.video.volume === 0) {
        this.volumeIcon?.classList.add('hidden');
        this.muteIcon?.classList.remove('hidden');
      } else {
        this.volumeIcon?.classList.remove('hidden');
        this.muteIcon?.classList.add('hidden');
      }
    }
    
    seekTo(e: MouseEvent) {
      const rect = this.progressBg.getBoundingClientRect();
      const percent = (e.clientX - rect.left) / rect.width;
      this.video.currentTime = percent * this.video.duration;
    }
    
    updateProgress() {
      const percent = (this.video.currentTime / this.video.duration) * 100;
      this.progressFill.style.width = `${percent}%`;
      this.progressHandle.style.left = `${percent}%`;
      
      if (this.currentTimeEl) {
        this.currentTimeEl.textContent = this.formatTime(this.video.currentTime);
      }
    }
    
    updateDuration() {
      if (this.durationEl) {
        this.durationEl.textContent = this.formatTime(this.video.duration);
      }
    }
    
    formatTime(seconds: number): string {
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    
    toggleFullscreen() {
      if (!document.fullscreenElement) {
        this.container.requestFullscreen();
      } else {
        document.exitFullscreen();
      }
    }
    
    updateFullscreenIcon() {
      if (document.fullscreenElement) {
        this.fullscreenIcon?.classList.add('hidden');
        this.exitFullscreenIcon?.classList.remove('hidden');
      } else {
        this.fullscreenIcon?.classList.remove('hidden');
        this.exitFullscreenIcon?.classList.add('hidden');
      }
    }
    
    handleKeyboard(e: KeyboardEvent) {
      // Only handle if video is in focus or no input is focused
      if (document.activeElement?.tagName === 'INPUT') return;
      
      switch(e.code) {
        case 'Space':
          e.preventDefault();
          this.togglePlayPause();
          break;
        case 'KeyM':
          this.toggleMute();
          break;
        case 'KeyF':
          this.toggleFullscreen();
          break;
        case 'ArrowLeft':
          this.video.currentTime -= 10;
          break;
        case 'ArrowRight':
          this.video.currentTime += 10;
          break;
        case 'ArrowUp':
          e.preventDefault();
          this.video.volume = Math.min(1, this.video.volume + 0.1);
          this.volumeSlider.value = this.video.volume.toString();
          this.updateVolumeIcon();
          break;
        case 'ArrowDown':
          e.preventDefault();
          this.video.volume = Math.max(0, this.video.volume - 0.1);
          this.volumeSlider.value = this.video.volume.toString();
          this.updateVolumeIcon();
          break;
      }
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new VideoPlayer();
  });
</script>