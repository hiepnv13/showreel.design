---
import { getCollection, type CollectionEntry } from "astro:content";
import { getAllVideos, generateSlug } from "../../utils/videoUtils";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import type { GetStaticPaths } from "astro";

export const getStaticPaths: GetStaticPaths = async () => {
  const videos = await getAllVideos();
  return videos.map((video: CollectionEntry<"videos">) => ({
    params: { slug: video.slug },
    props: { video },
  }));
};

interface Props {
  video: CollectionEntry<"videos"> & {
    data: CollectionEntry<"videos">["data"] & {
      videoUrl: string;
      previewUrl: string;
      videoSources: { src: string; type: string }[];
    };
  };
}

const { video }: Props = Astro.props;
const { Content } = await video.render();
---

<Layout title={video.data.title}>
  <Header />
  <main class="min-h-screen bg-gray-50">
    <!-- Hero Section with Video -->
    <section class="w-full bg-white">
      <!-- Video Container -->
      <div class="w-full">
        <div class="bg-white overflow-hidden relative">
          <video
            class="w-full h-auto cursor-pointer"
            autoplay
            controls
            controlslist="nodownload"
            playsinline
            style="object-fit: contain;"
          >
            <source src={video.data.videoUrl} type="video/mp4" />
            <source
              src={`/videos/${encodeURIComponent(video.data.videoFileName)}`}
              type="video/mp4"
            />
            Your browser does not support the video tag.
          </video>

          <!-- Fullscreen Button -->
          <button
            id="fullscreen-btn"
            class="absolute top-8 right-8 bg-black/50 hover:bg-black/70 text-white p-3 rounded-full transition-all duration-200 backdrop-blur-sm"
            title="Toggle Fullscreen"
          >
            <svg
              class="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 1v4m0 0h-4m4 0l-5-5"
              ></path>
            </svg>
          </button>
        </div>
      </div>
    </section>

    <!-- Video Information Section -->
    <section class="py-8 bg-white">
      <div class="max-w-7xl mx-auto px-5">
        <div class="text-center mb-12">
          <div class="mb-6">
            <a
              href={`/category/${generateSlug(video.data.category)}`}
              class="inline-block"
            >
            
            </a>
          </div>
          <h1
            class="text-4xl md:text-6xl font-bold mb-6 leading-tight text-gray-900"
          >
            {video.data.title}
          </h1>
          <p class="text-xl md:text-2xl text-gray-600 mb-8">
            by <a
              href={`/author/${generateSlug(video.data.author)}`}
              class="text-blue-600 hover:text-blue-800 transition-colors"
              >{video.data.author}</a
            >
          </p>
          <div class="flex flex-wrap justify-center gap-2 mb-8">
            {
              video.data.tags.map((tag: string) => (
                <a
                  href={`/tag/${generateSlug(tag)}`}
                  class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm hover:bg-gray-200 transition-colors"
                >
                  #{tag}
                </a>
              ))
            }
          </div>
          <p class="text-lg text-gray-600 max-w-2xl mx-auto">
            {video.data.description}
          </p>
        </div>
      </div>
    </section>

    

    <!-- Project Details Section -->
    

    
  </main>
</Layout>

<script>
  // Video player functionality
  document.addEventListener("DOMContentLoaded", () => {
    const video = document.querySelector("video") as HTMLVideoElement;
    const fullscreenBtn = document.getElementById("fullscreen-btn");

    if (video && fullscreenBtn) {
      // Set initial volume to 0%
      video.volume = 0;
      let volumeAnimated = false;

      // Function to animate volume from 0% to 25% over 3 seconds
      function animateVolumeUp() {
        if (volumeAnimated) return;
        volumeAnimated = true;
        
        const startTime = Date.now();
        const duration = 5000; // 5 seconds
        const targetVolume = 0.25; // 25%
        
        function updateVolume() {
          const elapsed = Date.now() - startTime;
          const progress = Math.min(elapsed / duration, 1);
          video.volume = targetVolume * progress;
          
          if (progress < 1) {
            requestAnimationFrame(updateVolume);
          }
        }
        
        requestAnimationFrame(updateVolume);
      }

      // Play video on click
      video.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (video.paused) {
          video.play();
        } else {
          video.pause();
        }
      });

      // Fullscreen functionality
      fullscreenBtn.addEventListener("click", (e) => {
        e.stopPropagation();

        if (!document.fullscreenElement) {
          if (video.requestFullscreen) {
            video.requestFullscreen();
          } else if ((video as any).webkitRequestFullscreen) {
            (video as any).webkitRequestFullscreen();
          } else if ((video as any).msRequestFullscreen) {
            (video as any).msRequestFullscreen();
          }
        } else {
          if (document.exitFullscreen) {
            document.exitFullscreen();
          } else if ((document as any).webkitExitFullscreen) {
            (document as any).webkitExitFullscreen();
          } else if ((document as any).msExitFullscreen) {
            (document as any).msExitFullscreen();
          }
        }
      });

      // Start volume animation when video loads
      video.addEventListener("loadeddata", () => {
        animateVolumeUp();
        video.play().catch((e) => {
          console.log("Auto-play prevented by browser:", e);
          // Fallback: show a play button overlay if autoplay fails
          showPlayButton();
        });
      });

      // Also start animation when metadata loads (backup)
      video.addEventListener("loadedmetadata", () => {
        animateVolumeUp();
      });

      // Show play button overlay if autoplay fails
      function showPlayButton() {
        const playOverlay = document.createElement("div");
        playOverlay.className =
          "absolute inset-0 flex items-center justify-center bg-black/20 cursor-pointer z-20";
        playOverlay.innerHTML = `
          <div class="bg-white/95 backdrop-blur-sm rounded-full p-6 shadow-lg hover:scale-110 transition-transform">
            <svg class="w-12 h-12 text-gray-900" fill="currentColor" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"/>
            </svg>
          </div>
        `;

        playOverlay.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          animateVolumeUp();
          video.play().then(() => {
            playOverlay.remove();
          });
        });

        video.parentElement?.appendChild(playOverlay);
      }
    }
  });
</script>